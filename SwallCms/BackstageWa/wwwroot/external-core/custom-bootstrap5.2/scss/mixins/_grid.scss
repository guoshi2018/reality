// Grid system
//
// Generate semantic grid columns with these mixins.
@use "variables" as *;
@use "sundry" as *;
@use "mixins/breakpoints" as *;
@use "functions" as *;
@use "maps" as *;
@use "spaces";

/// 各个item按照给定的格数, 分割 .row 的可用空间
@mixin -col-n($bars, $total, $is-row-ver) {
  flex: 0 0 auto;
  $p: percentage(divide($bars, $total));
  @if $is-row-ver == true {
    height: $p;
  } @else {
    width: $p;
  }
}

/// 各个item等分 .row 的可用空间
@mixin -col($is-row-ver) {
  flex: 1 1 0;
  @if $is-row-ver == true {
    height: 100%;
  } @else {
    width: 100%;
  }
}

/// 尺寸由item自身内容确定
/// @param {boolean} $is-row-ver
///   row 是否竖直方向
@mixin -col-auto($is-row-ver) {
  flex: 0 0 auto;
  @if $is-row-ver == true {
    height: auto;
  } @else {
    width: auto;
  }
}

// 直接子级的尺寸, 由$count决定. 注意与 -col-n 的区别
// 注意: 为方便起见, 已经修正为与 -col-n 无区别,
// @mixin -row-cols-n($count, $is-row-ver) {
//   > * {
//     flex: 0 0 auto;
//     $p: divide(100%, $count);
//     @if $is-row-ver == true {
//       height: $p;
//     } @else {
//       width: $p;
//     }
//   }
// }
// 没有被调用, 可以退休了
// @mixin -row-cols-n($i, $grid-columns, $is-row-ver) {
//   > * {
//     @include -col-n($i, $grid-columns, $is-row-ver);
//   }
// }

// 为当前item先偏移一段距离再放置, 对于竖直方向的 .vrow 和 .vrowr,
// 可能需要修正, 见 tool.ts
// 更好的方式是使用 FlexgridItemOffsetMender 类, 可及时动态修补此margin为正确设置
@mixin -col-offset($size, $columns, $is-row-ver, $is-dir-rev) {
  $num: divide($size, $columns);
  $gap: if($num ==0, 0, percentage($num));

  // 注意 .vrow 和 .vrowr 的 子级 col 家族, 下面的margin需要修正
  // 目前是通过js的方式(见tool.ts)
  @if $is-row-ver == true and $is-dir-rev == true {
    // column-reserve
    margin-bottom: $gap;
  } @else if $is-row-ver == true and $is-dir-rev == false {
    // column
    margin-top: $gap;
  } @else if $is-row-ver == false and $is-dir-rev == true {
    // row-reserve
    margin-right: $gap;
  } @else {
    // row
    margin-left: $gap;
  }
}

// .row 等 class 的公共部分
@mixin make-row-common($gutter-x: $grid-gutter-width, $gutter-y: $grid-gutter-height) {
  --#{$prefix}gutter-x: #{$gutter-x};
  --#{$prefix}gutter-y: #{$gutter-y};
  display: flex;
  flex-wrap: wrap;

  $px: calc(var(--#{$prefix}gutter-x) * -0.5);
  $py: calc(var(--#{$prefix}gutter-y) * -0.5);

  margin-right: $px; // stylelint-disable-line function-disallowed-list
  margin-left: $px; // stylelint-disable-line function-disallowed-list
  margin-top: $py;
  margin-bottom: $py;

  /*! 
    css 变量 gutter-(x,y,null)决定了.row的负margin和.col的padding, 以及
    item之间的空隙    
  */
  @include spaces.make-gutters;
}

//.row 的直接子级, 以及 .col 等 class　的公共部分

@mixin make-col-common() {
  // Add box sizing if only the grid is loaded
  box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
  flex-shrink: 0;
  // 应该将margin的补偿, 全部采用item的padding, 方能适应在竖向flex时的响应性
  // 注意, 如果使用margin补偿, 竖向排列的flex布局, offset-mq-(1,2,3...)更正将需要考虑此gutter的影响
  // 而使用padding,能达到一样的效果, 却可以简化更正逻辑
  $px: calc(var(--#{$prefix}gutter-x) * 0.5);
  $py: calc(var(--#{$prefix}gutter-y) * 0.5);
  padding-left: $px;
  padding-right: $px;
  padding-top: $py;
  padding-bottom: $py;
  overflow: auto;
}

// 注意, 将 .row-cols系列放在 .col-系列的前面, 是为了满足子级覆盖父级设置的要求, 虽然
// 分做两次循环会增大一点css的文件尺寸.
// $is-row-ver true表示竖排, false 表示横排
@mixin make-row-cols-classes($is-row-ver, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // 例如: .row.row-cols-mq-auto, 代表直接子级默认由自身内容决定尺寸
      &.row-cols#{$infix}-auto > * {
        @include -col-auto($is-row-ver);
      }

      // 例如: .row.row-cols-mq-3, 代表直接子级默认尺寸由标识的格数决定(总格数是$grid-columns)
      @for $i from 1 through $grid-columns {
        &.row-cols#{$infix}-#{$i} > * {
          @include -col-n($i, $grid-columns, $is-row-ver);
        }
      }
    }
  }
}

// 创建各种 .col-...-...  class, 分横排或竖排形式
// $is-row-ver true表示竖排, false 表示横排
@mixin make-col-classes($is-row-ver, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // 例如: .col-mq-quto, 代表默认由自身内容决定尺寸
      > .col#{$infix}-auto {
        @include -col-auto($is-row-ver);
      }

      // 例如: .col-mq-3, 代表直接子级默认尺寸由标识的格数决定(总格数是$grid-columns)
      @for $i from 1 through $grid-columns {
        > .col#{$infix}-#{$i} {
          @include -col-n($i, $grid-columns, $is-row-ver);
        }
      }

      // 例如: .col-mq, 代表默认尺寸由同样的class的元素, 共同平分而得到
      > .col#{$infix} {
        @include -col($is-row-ver);
      }
    }
  }
}

// 创建列偏移 .offset-mq-n, 例如 .offset-sm-3 代表偏移3格再放置item
@mixin make-col-offset-mq-n($is-row-ver, $is-dir-rev, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @for $i from 0 through ($grid-columns - 1) {
        // 允许 .offset-0, 这样可以使得调用代码更清晰
        > .offset#{$infix}-#{$i} {
          @include -col-offset($i, $grid-columns, $is-row-ver, $is-dir-rev);
        }
      }
    }
  }
}

@mixin make-cssgrid($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @if $columns >0 {
        @for $i from 1 through $columns {
          .g-col#{$infix}-#{$i} {
            grid-column: auto / span $i;
          }
        }

        // Start with `1` because `0` is and invalid value.
        // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.
        // 其实还是可以取值 $columns.
        @for $i from 1 through $columns {
          .g-start#{$infix}-#{$i} {
            grid-column-start: $i;
          }
        }
      }
    }
  }
}
